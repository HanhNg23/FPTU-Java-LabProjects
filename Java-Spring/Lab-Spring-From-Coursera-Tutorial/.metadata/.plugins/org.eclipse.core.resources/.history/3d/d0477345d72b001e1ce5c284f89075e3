package com.student.aspect;

import javax.inject.Named;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Named
@Aspect
//Aspect is indicate unit of modularity for cross-cutting concerns
public class StudentAspect {
	private Logger LOG = LoggerFactory.getLogger(this.getClass().getSimpleName());
	
	@Pointcut("execution(* com.student.service.*.*(..))")
	public void log() {
		
	}
	
	@Before("log()")
	public void before(JoinPoint jopo) {
		String aspectannounce =  "Invoked Method Before->" + jopo.getSignature().getName();
		System.out.println(aspectannounce);
	}
	
	@After("log()")
	public void after(JoinPoint jopo) {
		String aspectannounce = "Invoked Method Afetr->" + jopo.getSignature().getName();
		System.out.println(aspectannounce);
	}
	

}
